{
  "discussions": {
    "edges": [
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/684",
          "title": "Where to find the official Veramo Discord",
          "author": { "login": "JonasHiltl" },
          "comments": { "totalCount": 0 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/670",
          "title": "Use Case for Veramo",
          "author": { "login": "praveensankar" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "Veramo can be used to build agents for both issuers, holders and verifiers.\r\n\r\nExample credential flow:\r\n* Issuer uses `agent.createVerifiableCredential()` to issue a credential.\r\n* Issuer may use `agent.packDIDCommMessage()` and `agent.sendDIDCommMessage()` to send the credential to the holder, if they can establish a DIDComm channel.\r\n* Verifier requests credential from Holder, perhaps using `@veramo/selective-diclosure`, or maybe also DIDComm, but many other protocols can also be implemented and used with Veramo.\r\n* Holder uses `agent.createVerifiablePresentation()`, or `agent.` to package the credential.\r\n* Holder sends the presentation to the Verifier (using DIDComm, or other protocols).\r\n* Verifier calls `agent.handleMessage()` to interpret, verify and optionally store the presentation and the credentials it contains.\r\n\r\nNote: The verification API is undergoing some changes see #375 so it will likely be a lot more flexible and decoupled from the message handling logic.\r\n\r\nI hope this helps.\r\n"
          },
          "answerChosenAt": "2021-08-19T14:13:03Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/657",
          "title": "Questions about how to use veramo cli",
          "author": { "login": "cbw1030" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "Hello, these are all excellent questions.\r\n\r\n1. By default, the schema is served at `/open-api.json`. This is one of the routes that is served when you run `veramo server`.\r\nYou can see all the default routes in the [`agent.yml / server`](https://github.com/uport-project/veramo/blob/232de6656cf14c195d478915c8ccb1b203677483/packages/cli/default/default.yml#L75) config section.\r\nThe default routes are `/messaging`, `/agent`, `/open-api.json`, `/api-docs`\r\n\r\nNormally, when you just run `veramo server` the agent uses `http://localhost:3332` to listen for requests. You can browse to `http://localhost:3332/api-docs` to see it in action.\r\nIf you want to use `https://explore.veramo.dev` with your agent, your agent needs to be accessible from the web.\r\nWe've found it easy to work with [ngrok.io](https://ngrok.io/) to get a public endpoint for a locally running agent.\r\nAlternatively, you can try to [deploy the agent to a cloud](https://github.com/uport-project/veramo-agent-deploy)\r\n\r\n2. That depends a lot on what your personal wallet needs to do. By default a `@veramo/cli` agent is able to create DIDs and issue, receive and present credentials related to these DIDs. Some extra configuration steps may be necessary to get full functionality, like my answer to question 1.\r\n\r\n3. The `veramo did add-key` command is supposed to create a private key and add the corresponding public key to the DID document of the DID you are managing. Depending on the type of key you add, this can later be used for signing or [de]encryption.\r\nIt is not recommended to try to use the private key directly.\r\nThis key(or one of the other managed keys) is used when your agent issues credentials (for example, `veramo credential create`), presentations, during selective disclosure, or for communication using DIDComm.\r\n\r\nI hope this info helps. Perhaps if you describe your use case in more detail I can provide more concrete answers."
          },
          "answerChosenAt": "2021-08-12T01:40:41Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/663",
          "title": "Questions about how to use veramo cli â…¡",
          "author": { "login": "cbw1030" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/654",
          "title": "Browser storage",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 0 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/591",
          "title": "TYPEING Creating VP with JWTs not correct",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 2 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/650",
          "title": "Any document or guide on the credential issuance transportation",
          "author": { "login": "thomas-tran" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/647",
          "title": "What is the best way to add custom columns to Claims and Credentials",
          "author": { "login": "Muhammad-Altabba" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/629",
          "title": "Deleting stored VCs",
          "author": { "login": "atz3n" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "You are not missing anything.\r\nThe interface for deleting VCs was never built."
          },
          "answerChosenAt": "2021-07-23T09:51:39Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/648",
          "title": "What is the new alternative for  Daf mobile app",
          "author": { "login": "devrajsinghrawat" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/638",
          "title": "Is there a maximum number of credentials that can be issued per unit of time?",
          "author": { "login": "JovanShandro" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "There is no limit imposed by Veramo.\r\nI suspect that the reason you are only seeing a small number of credentials is because you are creating groups of identical credentials.\r\nThe only difference between the credentials you are creating is the timestamp, which has a resolution of Seconds.\r\nWhen they are stored, they are hashed and the hash is used as primary key. since they are identical, the same hash is computed so they end up overwriting each other.\r\n\r\nPlease try to add a random nonce to your credentials and see if the issue manifests again.\r\n\r\n```ts\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//...\r\n  for (let i = 0; i < 100 * 1000; i++) {\r\n    const credential: W3CCredential = {\r\n      id: uuidv4(),\r\n      issuer: { id: identifier.did }, // a did:ethr:rinkeby DID\r\n      \"@context\": [\"https://www.w3.org/2018/credentials/v1\"],\r\n      type: [\"VerifiableCredential\", \"Profile\"],\r\n      issuanceDate: new Date().toISOString(),\r\n      credentialSubject: {\r\n        name: \"Name\",\r\n        id: identifier.did,\r\n      },\r\n    };\r\n\r\n    await agent.createVerifiableCredential({\r\n      save: true,\r\n      credential,\r\n      proofFormat: \"jwt\",\r\n    });\r\n  }\r\n```"
          },
          "answerChosenAt": "2021-07-26T12:00:20Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/574",
          "title": "Interface for changing the DID controller",
          "author": { "login": "atz3n" },
          "comments": { "totalCount": 2 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "Hi, you are right. That interface is absent.\r\nWe omitted this method initially because of lack of clarity of how DID controllers can change for various DID methods.\r\nSo far, we've worked mostly with `did:ethr`, `did:web`, and `did:key` until now, and changing DID controllers is tricky to define.\r\n* `did:ethr` has an `owner` property on the ledger, but that does not reflect as a `controller` property for the DID document, but rather only in the available verification methods.\r\n* `did:web` spec does not mention controller at all\r\n* `did:key` controller makes no sense since it cannot be updated.\r\n\r\nNow that you have a need for it, it would be great if you could describe your use case and how it can be implemented for different DID methods.\r\nVeramo should be agnostic to the DID method, so what you are asking for makes sense for the general use-case."
          },
          "answerChosenAt": "2021-06-18T08:24:34Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/589",
          "title": "Importing an Identifier",
          "author": { "login": "atz3n" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "Great question!\r\n\r\nThe identifiers retrieved by `agent.didManager*()` methods list the keys as they appear in the database. In your case, you are likely using a `SecretBox` with your `KeyManager` in your setup, which means your keys are encrypted (as they should be!).\r\n\r\nYou can get the decrypted key by something like `const fullKey = await agent.keyManagerGet({kid: createdIdentifier.keys[0].kid})`\r\nand then do `createdIdentifier.keys[0] = fullKey` before you call `agent.didManager.import(createdIdentifier)`\r\n\r\n### Important note\r\nThis works because the current implementation of `@veramo/key-manager` and `@veramo/kms-local` allow keys to be exported.\r\nThis functionality will likely be removed at some point from them.\r\nOther implementations of `AbstractKeyManagerSystem` (that do not appear in this repository) use different key storage techniques and will not allow you to get to a private key.\r\n\r\nWe plan to add some convenience methods to allow you to import keys and identifiers more easily and also to bootstrap some identifiers from existing keys."
          },
          "answerChosenAt": "2021-06-25T14:09:01Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/584",
          "title": "Implementing a new credential model",
          "author": { "login": "rosdec" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/579",
          "title": "Verfi JWT from ETHR fails",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "After some digging it seems there is an issue with the JsonRPC provider. It's not able to confirm the network ID.\r\nI will dig a little deeper, since this might be an issue with `ethr-did-resolver`.\r\n\r\nUsing your code with a known JsonRPC (like one from infura) seems to work ok.\r\n\r\nUpdate:\r\n - I'm getting a HTTP 401 error when using the JsonRPC url you provide in your tests project to call 'eth_chainId' or 'net_version'."
          },
          "answerChosenAt": "2021-06-21T12:53:20Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/581",
          "title": "use-case that requires rebooting of uport ios sdk repository",
          "author": { "login": "sushantgiri" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/577",
          "title": "ETHR createVerifiableCredential() TypeError: Invalid private key format",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "RobertoSnap" },
            "body": "Found what i did wrong. Forgot to change the keytype to Secp256k1"
          },
          "answerChosenAt": "2021-06-18T08:03:54Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/564",
          "title": "Provision key to db",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "Hi, here's an example of importing an Ed25519 signing key:\r\n\r\n```ts\r\nconst keyData = {\r\n        kid: 'ea75250531f6834328ac210618253288e4c54632962a9708ca82e4a399f79000',\r\n        kms: 'local',\r\n        type: <TKeyType>'Ed25519',\r\n        publicKeyHex: 'ea75250531f6834328ac210618253288e4c54632962a9708ca82e4a399f79000',\r\n        privateKeyHex: '65f341541643070564bb48d9fc10556f2dec246fa056e436a8ec1cdef8c74766ea75250531f6834328ac210618253288e4c54632962a9708ca82e4a399f79000',\r\n      }\r\nconst imported = await agent.keyManagerImport(keyData)\r\n```\r\n\r\nIs this what you mean by provisioning the database with a key?\r\nIf not, then please elaborate"
          },
          "answerChosenAt": "2021-06-17T10:49:19Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/572",
          "title": "TypeError: context.agent.dataStoreSaveVerifiableCredential is not a function",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "you are probably missing some data store plugins in your agent setup:\r\n```ts\r\nagent = createAgent<\r\n  //...\r\n  & IDataStore\r\n  & IDataStoreORM\r\n>({\r\n    // ...\r\n    plugins: [\r\n      // ...\r\n      new DataStore(dbConnection),\r\n      new DataStoreORM(dbConnection),\r\n    ]})\r\n```"
          },
          "answerChosenAt": "2021-06-17T11:38:36Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/569",
          "title": "Issue credential",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "I suspect that the error is coming from the [`createVerifiableCredential()` call](https://github.com/BROKLab/auth-bot/blob/ad00082b2e73ee790ed5835bd0d4389fa1a23dbd/src/network/veramo.service.ts#L104)\r\nIt is expecting that `credentialSubject` should have some `claims` (other properties beside `id`)\r\n\r\nUsing your example, perhaps the `data` parameter is intended to contain the claims, in which case it would look something like this:\r\n```ts\r\ncredentialSubject: {\r\n  id: subjectDidId,\r\n  ...data\r\n},\r\n```\r\n\r\nTake a look at the example in this other discussion: https://github.com/uport-project/veramo/discussions/571#discussioncomment-873268 too.\r\n\r\nPlease note that `createVerifiableCredential()` internally calls `keyManagerSign`. You don't have to call it on your own unless you need a JWS signature for other purposes."
          },
          "answerChosenAt": "2021-06-16T15:12:44Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/571",
          "title": "JWS / Proof in createVerifiableCredential",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "`createVerifiableCredential` returns a Verifiable Credential object with a structure mimicking the ones described in the [W3C VC data model](https://www.w3.org/TR/vc-data-model/) for convenience.\r\n\r\nWhen using `proofFormat: 'jwt'`, veramo creates a synthetic `JwtProof2020` proof property on the returned credential.\r\nThis proof type has a `jwt` field that contains the actual credential in [JWT encoding](https://www.w3.org/TR/vc-data-model/#jwt-encoding).\r\n\r\nYou can try something like this:\r\n```ts\r\nconst issuerX = await agent.didManagerGet({ did: 'did:example:issuerX' })\r\n\r\nconst credential = {\r\n  issuer: { id: issuerX.did }, // issuer DID MUST be an identifier managed by this agent ()\r\n  credentialSubject: { \r\n    id: 'did:example:subjectY', \r\n    name: 'Old Nordmann' \r\n  },\r\n}\r\nconst vc = await agent.createVerifiableCredential({\r\n  credential,\r\n  proofFormat: 'jwt',\r\n})\r\n\r\nconsole.log(JSON.stringify(vc, null, 2))\r\n/*\r\n{\r\n  issuer: { id: 'did:example:issuerX' },\r\n  credentialSubject: {\r\n    name: 'Old Nordmann',\r\n    id: 'did:example:subjectY'\r\n  },\r\n  type: [ 'VerifiableCredential' ],\r\n  issuanceDate: '2021-06-15T07:27:01.000Z',\r\n  proof: {\r\n    type: 'JwtProof2020',\r\n    jwt: 'eyJhbGci.....OCbMK8U1p6B0KzVA'\r\n  },\r\n  '@context': [ 'https://www.w3.org/2018/credentials/v1' ]\r\n}\r\n*/\r\n```\r\n\r\nPlease note that `JwtProof2020` is not a registered proof type. It is only used for convenience, to be able to simplify the data model when working with JWT credential format.\r\n\r\nI hope this helps"
          },
          "answerChosenAt": "2021-06-16T15:11:16Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/567",
          "title": "Find DID",
          "author": { "login": "RobertoSnap" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "try `didManagerGet` instead of `didManagerFind`\r\n\r\n```ts\r\nconst identifier = await this.agent.didManagerGet({\r\n      did: 'did:key:z6Mkk1V84BS2VGjRyHEsC72w1FBpjLTtUN2bdqiHzpuxr9X8',\r\n    });\r\n```"
          },
          "answerChosenAt": "2021-06-15T12:07:51Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/535",
          "title": "Proof of control over DID during Verifiable Presentation",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "Excellent questions.\r\nThe answer is rather simple and probably disappointing.\r\nAt present, veramo doesn't validate that all the VCs in a presentation are about the same subject (the holder).\r\nThis is half by design and half not-implemented-yet.\r\nSome form of holder binding validation is planned as a part of the bigger vc/vp verification story (look for #375), and the \"by-design\" part is because not all protocols will require holder binding.\r\n\r\nAs for the other answer, I think I misrepresented the current implementation of `selective-disclosure`.\r\nIt is inspired by the uPort selective disclosure but doesn't have all the features from it.\r\nFrankly, the current implementation is more of a proof of concept than a reference implementation.\r\nI'll try to provide a more detailed answer there."
          },
          "answerChosenAt": "2021-05-29T20:57:32Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/356",
          "title": "Looking for resources about SRD",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/533",
          "title": "Veramo example including Holder, Issuer and Verifier (or Verifiable Credentials' Request and Response)",
          "author": { "login": "amal-abid05" },
          "comments": { "totalCount": 2 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/544",
          "title": "Error `Unexpected end of data` when parsing a JWT",
          "author": { "login": "Muhammad-Altabba" },
          "comments": { "totalCount": 8 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/508",
          "title": "How could I use \"did add-service\" command at cli?",
          "author": { "login": "ouoabcde" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/514",
          "title": "Credential Verification after DID Controller Update",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/380",
          "title": "Source Code of Mars Web Application",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "jasonhealy" },
            "body": "Mars is an unsupported experimental dashboard project for your agents. \n\nhttps://github.com/veramolabs/mars-app\n\nFeel free to use it but it will be archived soon as we have an officially supported dashboard being open sourced next week. "
          },
          "answerChosenAt": "2021-02-10T22:18:38Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/499",
          "title": "Recommended way for docker-compose setup",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/482",
          "title": "Should we branch off 'next'?",
          "author": { "login": "trentlarson" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/420",
          "title": "Help with SDR flow",
          "author": { "login": "sk91" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/478",
          "title": "Node JS Configuration",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/439",
          "title": "Verify credentials",
          "author": { "login": "sk91" },
          "comments": { "totalCount": 2 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/441",
          "title": "Using DIDComm with HSM",
          "author": { "login": "koptan" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/438",
          "title": "Key recovery",
          "author": { "login": "Anushka3174" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/425",
          "title": "Master key location",
          "author": { "login": "Anushka3174" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/405",
          "title": "Authentication with DIDs and VC",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/421",
          "title": "Interface for getting all the VCs when receiving an SDR as JWT",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/411",
          "title": "Create React App setup.ts",
          "author": { "login": "rbjamaca" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "I believe this is caused by a mismatched version of the  `did-resolver` library.\r\nThat library has a breaking change update in the latest version and veramo is not yet updated to support it.\r\n\r\nPlease downgrade your version of that library"
          },
          "answerChosenAt": "2021-03-08T23:25:10Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/409",
          "title": "DIDComm in Veramo",
          "author": { "login": "koptan" },
          "comments": { "totalCount": 0 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/407",
          "title": "Does veramo support offline credential exchange?",
          "author": { "login": "thomas-tran" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/402",
          "title": "Does Veramo provides \"peer wise DID support\"",
          "author": { "login": "devrajsinghrawat" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/401",
          "title": "Using Vermo with HSM (Hardware security module)",
          "author": { "login": "koptan" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/393",
          "title": "Using Vermo for our Identity system",
          "author": { "login": "koptan" },
          "comments": { "totalCount": 3 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/392",
          "title": "detailed information on CRUD operations in DID",
          "author": { "login": "praveensankar" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/390",
          "title": "Credential Types",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "Thank you for flagging this behavior. It's a bug, or rather the lack of a feature.\r\n\r\nThere is a plan to add some more flexibility to the CLI commands, but it is lower down in the priority list (for now).\r\nMany commands have an interactive aspect and the plan is to enable the user to specify all the parameters in advance so that the CLI can be used without human presence.\r\nIn this case, it would be great if you could pipe a JSON file with the complete payload (including custom contexts) to create the verifiable credential.\r\n\r\nIf you have a suggestion about how this could be improved, and especially if you want to contribute a fix, please open an issue and/or PR."
          },
          "answerChosenAt": "2021-03-09T04:57:45Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/389",
          "title": "Installing/compiling the veramo source code",
          "author": { "login": "praveensankar" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/388",
          "title": "did web method",
          "author": { "login": "praveensankar" },
          "comments": { "totalCount": 2 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/371",
          "title": "JWT Signature Verification",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/365",
          "title": "how can i check the identities i created on infura using the nodejs veramo api",
          "author": { "login": "anotherrohit" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/360",
          "title": "DID registry on Ethereum",
          "author": { "login": "simibac" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "mirceanis" },
            "body": "Great questions!\r\n\r\n1. Yes, that is the contract that is used when `did:ethr` is used.\r\n2. The `did:ethr` protocol does not require DIDs to be registered when they are created.\r\n\r\n## Background\r\nThe expected lifecycle of a `did:ethr` is that a keypair is created locally and then the public key is used to form the DID:\r\n`generate keyPair` -> ``did:ethr:${publicKey}``\r\nThis fresh DID is a valid and resolvable `did:ethr`, and when it is resolved it produces a DID document containing the public key.\r\nUp until this point it is very similar to `did:key`, except for the encoding of the publicKey which in the case of did:ethr is HEX.\r\n\r\nThe difference comes when you need to update the DID document.\r\nOnly then does one need to interact with the ethereum network and use gas.\r\n\r\nFrom the ethr-did-registry contract's perspective, gas can be supplied either by directly funding the address corresponding to the keypair (classical ethereum external account interaction) or by using meta-transactions.\r\n\r\nThe `ethr-did-registry` contract supports meta transactions since inception, although I don't know if it is compatible with GSN.\r\nGSN seems to be a newer than the already deployed ethr-did-registry. If you do try out using the GSN with the ethr-did-registry then it would make a great entry for the [show and tell](https://github.com/uport-project/veramo/discussions/categories/show-and-tell) section of the discussions ðŸ˜‰\r\n\r\n## How it works in veramo now\r\n\r\nThis repository contains a `did-provider-ethr` plugin that can create and manage ethr DIDs.\r\nCreating is free, but management involves gas.\r\nThe current implementation is a very simple one that assumes the address of the did:ethr is already funded.\r\n(improvements here are welcome, by the way)\r\n\r\n## Notes\r\nThe `did:ethr` protocol differentiates between ethereum networks:\r\n* `did:ethr:${publicKey}` -> mainnet\r\n* `did:ethr:rinkeby:${publicKey}` -> rinkeby (using the network name)\r\n* `did:ethr:0x4:${publicKey}` -> also rinkeby (using chainID)\r\n\r\nThis means that the same keypair can control multiple DIDs; each resolvable using a different ethereum network."
          },
          "answerChosenAt": "2021-02-03T07:30:02Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/357",
          "title": "Looking for sample QR Codes",
          "author": { "login": "rkreutzer" },
          "comments": { "totalCount": 2 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/316",
          "title": "Introducing Veramo ~ A JavaScript Framework for Verifiable Data",
          "author": { "login": "jasonhealy" },
          "comments": { "totalCount": 2 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/346",
          "title": "Recovery of ID from previous uPort app",
          "author": { "login": "trentlarson" },
          "comments": { "totalCount": 3 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/338",
          "title": "Where will the credential definition be stored?",
          "author": { "login": "thomas-tran" },
          "comments": { "totalCount": 2 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/326",
          "title": "How to create the connection between 2 agents and exchange the credentials",
          "author": { "login": "thomas-tran" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/325",
          "title": "error An unexpected error occurred: \"https://registry.yarnpkg.com/@veramo%2fplugin-identity-manager: Not found\".",
          "author": { "login": "HamzaBinSarfraz" },
          "comments": { "totalCount": 1 },
          "answer": {
            "author": { "login": "gbugyis" },
            "body": "Hi Muhammad - Thanks for catching that. The node guide needed to be updated. I just went through and made [the changes](https://github.com/uport-project/veramo-website/pull/25). Can you give it another try?  (https://veramo.io/docs/guides/nodejs)"
          },
          "answerChosenAt": "2020-12-22T09:32:07Z"
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/290",
          "title": "Welcome to veramo Discussions!",
          "author": { "login": "mirceanis" },
          "comments": { "totalCount": 1 },
          "answer": null,
          "answerChosenAt": null
        }
      },
      {
        "node": {
          "url": "https://github.com/uport-project/veramo/discussions/297",
          "title": "Daf-mobile setup difficulty",
          "author": { "login": "pvanroos" },
          "comments": { "totalCount": 2 },
          "answer": {
            "author": { "login": "jasonhealy" },
            "body": "Hey Paul, We will be releasing some tutorials this week (along with the latest version of daf) to get started building in React Native from scratch. Thereâ€™s a lot of outdated code in â€˜daf-mobileâ€™ right now and we most likely will create a new mobile reference implementation from scratch inline with the new docs minus all the experimental code. However, You should be able build this branch as Iâ€™ve been recently been working on it to ensure RN support for the latest version of daf. \r\n\r\nhttps://github.com/uport-project/daf-mobile/tree/feature/daf-7-upgrade\r\n\r\nLet us know if you have any issues?\r\n"
          },
          "answerChosenAt": "2020-12-14T11:07:03Z"
        }
      }
    ]
  }
}
